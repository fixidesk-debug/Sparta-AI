name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  lint:
    name: Lint and format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Run backend linters
        run: |
          pip install ruff black isort
          ruff backend --fix
          isort backend
          black backend
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install frontend deps
        run: |
          cd frontend
          npm ci
      - name: Run frontend linters
        run: |
          cd frontend
          npm run lint || true

  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: sparta
          POSTGRES_PASSWORD: sparta_pass
          POSTGRES_DB: sparta_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U sparta" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Start test services
        run: |
          docker-compose -f docker-compose.test.yml up -d
      - name: Wait for services
        run: |
          sleep 5
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -r backend/requirements-dev.txt
      - name: Seed test DB
        run: |
          python backend/tests/seed_db.py
      - name: Run backend tests
        env:
          TEST_DATABASE_URL: postgresql://sparta:sparta_pass@localhost:5433/sparta_test
          REDIS_URL: redis://localhost:6380/0
        run: |
          cd backend
          pytest -q --maxfail=1
      - name: Tear down test services
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v
      - name: Run frontend tests
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Frontend test
        run: |
          cd frontend
          npm ci
          npm test -- --watchAll=false
      - name: Upload backend coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-html
          path: backend/htmlcov

  security-scan:
    name: Security scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trivy scan backend deps
        uses: aquasecurity/trivy-action@v2
        with:
          scan-type: 'fs'
          scan-ref: 'backend'
      - name: Trivy scan frontend deps
        uses: aquasecurity/trivy-action@v2
        with:
          scan-type: 'fs'
          scan-ref: 'frontend'
      - name: Snyk (optional)
        uses: snyk/actions/node@master
        with:
          args: test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-and-push:
    name: Build Docker images and push to registry
    runs-on: ubuntu-latest
    needs: [lint, test, security-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sparta-backend:${{ github.sha }}
      - name: Build & push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sparta-frontend:${{ github.sha }}
      - name: Trivy scan images
        uses: aquasecurity/trivy-action@v2
        with:
          scan-type: 'image'
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/sparta-backend:${{ github.sha }}
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/htmlcov || backend/.coverage

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Notify Slack (if configured)
        uses: rtCamp/action-slack-notify@v2
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          status: ${{ job.status }}
