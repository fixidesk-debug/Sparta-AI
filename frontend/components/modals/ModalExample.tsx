import React, { useState } from 'react';
import ExportModal, { ExportOptions } from './ExportModal';
import ShareModal, { ShareSettings } from './ShareModal';
import { FileText, Download, Eye, FileText as Share2 } from '../icons';
import './Modal.scss';

/**
 * ModalExample Component
 * 
 * Comprehensive example demonstrating the ExportModal and ShareModal components
 * with sample data and interaction handlers.
 * 
 * Features demonstrated:
 * - Export wizard with multiple formats
 * - Quality settings and options
 * - Preview functionality
 * - Share link generation
 * - Social media sharing
 * - Access control and permissions
 * - QR code generation
 */

const ModalExample: React.FC = () => {
  const [exportModalOpen, setExportModalOpen] = useState(false);
  const [shareModalOpen, setShareModalOpen] = useState(false);
  const [exportLog, setExportLog] = useState<string[]>([]);
  const [shareLog, setShareLog] = useState<string[]>([]);
  const [shareUrl, setShareUrl] = useState('');

  // =====================
  // Export Handler
  // =====================

  const handleExport = async (options: ExportOptions): Promise<void> => {
    return new Promise((resolve, reject) => {
      // Simulate export process
      setTimeout(() => {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = `[${timestamp}] Exported as ${options.format.toUpperCase()} (Quality: ${options.quality})`;
        setExportLog((prev) => [logEntry, ...prev]);

        // Simulate success
        if (Math.random() > 0.1) {
          resolve();
        } else {
          reject(new Error('Export failed due to network error'));
        }
      }, 2000);
    });
  };

  // =====================
  // Share Handler
  // =====================

  const handleShare = async (settings: ShareSettings): Promise<string> => {
    return new Promise((resolve, reject) => {
      // Simulate share link generation
      setTimeout(() => {
        const timestamp = new Date().toLocaleTimeString();
        const generatedUrl = `https://sparta-ai.app/share/${Math.random().toString(36).substring(7)}`;
        
        setShareUrl(generatedUrl);
        
        const logEntry = `[${timestamp}] Share link generated: ${generatedUrl} (Access: ${settings.accessLevel})`;
        setShareLog((prev) => [logEntry, ...prev]);

        // Simulate success
        if (Math.random() > 0.1) {
          resolve(generatedUrl);
        } else {
          reject(new Error('Failed to generate share link'));
        }
      }, 1500);
    });
  };

  // =====================
  // Preview Content
  // =====================

  const previewContent = (
    <div style={{ width: '100%', maxWidth: '600px' }}>
      <div
        style={{
          background: 'white',
          borderRadius: '8px',
          padding: '32px',
          boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
        }}
      >
        <h2 style={{ margin: '0 0 16px 0', color: '#1f2937', fontSize: '24px', fontWeight: '600' }}>
          Sample Report
        </h2>
        <p style={{ margin: '0 0 16px 0', color: '#6b7280', fontSize: '14px', lineHeight: '1.6' }}>
          This is a preview of your export. The final document will include all selected data,
          charts, and formatting options.
        </p>
        <div
          style={{
            background: '#f3f4f6',
            borderRadius: '8px',
            padding: '24px',
            marginBottom: '16px',
          }}
        >
          <h3 style={{ margin: '0 0 12px 0', color: '#374151', fontSize: '16px', fontWeight: '600' }}>
            Key Metrics
          </h3>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '16px' }}>
            <div>
              <div style={{ fontSize: '24px', fontWeight: '700', color: '#2563eb' }}>85%</div>
              <div style={{ fontSize: '12px', color: '#6b7280' }}>Completion</div>
            </div>
            <div>
              <div style={{ fontSize: '24px', fontWeight: '700', color: '#10b981' }}>1,234</div>
              <div style={{ fontSize: '12px', color: '#6b7280' }}>Total Items</div>
            </div>
            <div>
              <div style={{ fontSize: '24px', fontWeight: '700', color: '#f59e0b' }}>42</div>
              <div style={{ fontSize: '12px', color: '#6b7280' }}>Pending</div>
            </div>
          </div>
        </div>
        <div style={{ fontSize: '12px', color: '#9ca3af', textAlign: 'center', marginTop: '24px' }}>
          Generated by Sparta AI • {new Date().toLocaleDateString()}
        </div>
      </div>
    </div>
  );

  // =====================
  // Render
  // =====================

  return (
    <div className="modal-example">
      {/* Header */}
      <div className="modal-example-header">
        <h1>Modal Components Example</h1>
        <p>Demonstration of export and sharing modal interfaces with glass morphism design.</p>
      </div>

      {/* Action Buttons */}
      <div className="modal-example-actions">
        <button className="example-action-btn export-btn" onClick={() => setExportModalOpen(true)}>
          <Download size={20} />
          <span>Open Export Modal</span>
        </button>
        <button className="example-action-btn share-btn" onClick={() => setShareModalOpen(true)}>
          <Share2 size={20} />
          <span>Open Share Modal</span>
        </button>
      </div>

      {/* Sample Content Card */}
      <div className="modal-example-card">
        <div className="card-icon">
          <FileText size={48} />
        </div>
        <h2>Sample Document</h2>
        <p>This is a sample document that can be exported or shared using the modal components.</p>
        <div className="card-stats">
          <div className="stat-item">
            <span className="stat-value">1,234</span>
            <span className="stat-label">Records</span>
          </div>
          <div className="stat-item">
            <span className="stat-value">85%</span>
            <span className="stat-label">Complete</span>
          </div>
          <div className="stat-item">
            <span className="stat-value">42</span>
            <span className="stat-label">Pending</span>
          </div>
        </div>
        <div className="card-actions">
          <button className="card-action-btn primary" onClick={() => setExportModalOpen(true)}>
            <Download size={16} />
            Export
          </button>
          <button className="card-action-btn secondary" onClick={() => setShareModalOpen(true)}>
            <Share2 size={16} />
            Share
          </button>
          <button className="card-action-btn ghost">
            <Eye size={16} />
            Preview
          </button>
        </div>
      </div>

      {/* Export Log */}
      {exportLog.length > 0 && (
        <div className="modal-example-log">
          <h3>Export Activity</h3>
          <div className="log-entries">
            {exportLog.map((entry, index) => (
              <div key={index} className="log-entry">
                {entry}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Share Log */}
      {shareLog.length > 0 && (
        <div className="modal-example-log">
          <h3>Share Activity</h3>
          <div className="log-entries">
            {shareLog.map((entry, index) => (
              <div key={index} className="log-entry">
                {entry}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Modals */}
      <ExportModal
        isOpen={exportModalOpen}
        onClose={() => setExportModalOpen(false)}
        onExport={handleExport}
        title="Export Document"
        previewContent={previewContent}
        availableFormats={['pdf', 'png', 'jpg', 'svg', 'csv', 'xlsx', 'json']}
      />

      <ShareModal
        isOpen={shareModalOpen}
        onClose={() => setShareModalOpen(false)}
        onShare={handleShare}
        title="Share Document"
        shareUrl={shareUrl}
        itemName="Sample Document - Sparta AI Report"
      />

      {/* Usage Documentation */}
      <div className="modal-example-docs">
        <h2>Component Usage</h2>
        
        <div className="docs-section">
          <h3>ExportModal</h3>
          <pre className="code-block">
{`<ExportModal
  isOpen={exportModalOpen}
  onClose={() => setExportModalOpen(false)}
  onExport={handleExport}
  title="Export Document"
  previewContent={previewContent}
  availableFormats={['pdf', 'png', 'csv', 'xlsx']}
/>`}
          </pre>
          <div className="docs-features">
            <h4>Features:</h4>
            <ul>
              <li>✅ Progress stepper with 4 steps</li>
              <li>✅ 7 file format options with icons</li>
              <li>✅ Quality slider (low, medium, high, ultra)</li>
              <li>✅ Page size and orientation options</li>
              <li>✅ Include/exclude metadata, charts, data</li>
              <li>✅ Live preview with zoom controls</li>
              <li>✅ Progress indicator during export</li>
              <li>✅ Success/error feedback</li>
            </ul>
          </div>
        </div>

        <div className="docs-section">
          <h3>ShareModal</h3>
          <pre className="code-block">
{`<ShareModal
  isOpen={shareModalOpen}
  onClose={() => setShareModalOpen(false)}
  onShare={handleShare}
  title="Share Document"
  shareUrl={shareUrl}
  itemName="My Document"
/>`}
          </pre>
          <div className="docs-features">
            <h4>Features:</h4>
            <ul>
              <li>✅ Link generation with copy button</li>
              <li>✅ Social media share buttons (5 platforms)</li>
              <li>✅ Access level control (view, comment, edit, admin)</li>
              <li>✅ Public/private access toggle</li>
              <li>✅ Download permission toggle</li>
              <li>✅ Password protection</li>
              <li>✅ Expiration date picker</li>
              <li>✅ Email whitelist</li>
              <li>✅ QR code generation</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Styling */}
      <style>{`
        .modal-example {
          max-width: 1200px;
          margin: 0 auto;
          padding: 40px 20px;
        }

        .modal-example-header {
          text-align: center;
          margin-bottom: 48px;
        }

        .modal-example-header h1 {
          font-size: 36px;
          font-weight: 700;
          color: #1f2937;
          margin: 0 0 16px 0;
        }

        .modal-example-header p {
          font-size: 16px;
          color: #6b7280;
          margin: 0;
        }

        .modal-example-actions {
          display: flex;
          justify-content: center;
          gap: 16px;
          margin-bottom: 48px;
        }

        .example-action-btn {
          display: flex;
          align-items: center;
          gap: 10px;
          padding: 16px 32px;
          font-size: 16px;
          font-weight: 600;
          border: none;
          border-radius: 12px;
          cursor: pointer;
          transition: all 200ms ease;
          color: white;
        }

        .export-btn {
          background: linear-gradient(135deg, #2563eb, #3b82f6);
        }

        .share-btn {
          background: linear-gradient(135deg, #10b981, #34d399);
        }

        .example-action-btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
        }

        .modal-example-card {
          background: white;
          border-radius: 16px;
          padding: 32px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
          text-align: center;
          margin-bottom: 32px;
        }

        .card-icon {
          color: #2563eb;
          margin-bottom: 16px;
        }

        .modal-example-card h2 {
          font-size: 24px;
          font-weight: 600;
          color: #1f2937;
          margin: 0 0 12px 0;
        }

        .modal-example-card > p {
          font-size: 14px;
          color: #6b7280;
          margin: 0 0 24px 0;
        }

        .card-stats {
          display: grid;
          grid-template-columns: repeat(3, 1fr);
          gap: 24px;
          padding: 24px;
          background: #f9fafb;
          border-radius: 12px;
          margin-bottom: 24px;
        }

        .stat-item {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }

        .stat-value {
          font-size: 28px;
          font-weight: 700;
          color: #1f2937;
        }

        .stat-label {
          font-size: 12px;
          color: #6b7280;
          text-transform: uppercase;
          letter-spacing: 0.5px;
        }

        .card-actions {
          display: flex;
          justify-content: center;
          gap: 12px;
        }

        .card-action-btn {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 12px 24px;
          font-size: 14px;
          font-weight: 500;
          border-radius: 8px;
          border: none;
          cursor: pointer;
          transition: all 200ms ease;
        }

        .card-action-btn.primary {
          background: linear-gradient(135deg, #2563eb, #3b82f6);
          color: white;
        }

        .card-action-btn.secondary {
          background: linear-gradient(135deg, #10b981, #34d399);
          color: white;
        }

        .card-action-btn.ghost {
          background: transparent;
          color: #6b7280;
          border: 2px solid #d1d5db;
        }

        .card-action-btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .modal-example-log {
          background: #1f2937;
          border-radius: 12px;
          padding: 24px;
          margin-bottom: 32px;
        }

        .modal-example-log h3 {
          color: #f9fafb;
          font-size: 16px;
          font-weight: 600;
          margin: 0 0 16px 0;
        }

        .log-entries {
          display: flex;
          flex-direction: column;
          gap: 8px;
          max-height: 200px;
          overflow-y: auto;
        }

        .log-entry {
          font-family: 'Courier New', monospace;
          font-size: 13px;
          color: #10b981;
          padding: 8px 12px;
          background: rgba(255, 255, 255, 0.05);
          border-radius: 6px;
        }

        .modal-example-docs {
          background: white;
          border-radius: 16px;
          padding: 32px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .modal-example-docs h2 {
          font-size: 24px;
          font-weight: 600;
          color: #1f2937;
          margin: 0 0 32px 0;
        }

        .docs-section {
          margin-bottom: 32px;
        }

        .docs-section h3 {
          font-size: 18px;
          font-weight: 600;
          color: #374151;
          margin: 0 0 16px 0;
        }

        .docs-section h4 {
          font-size: 14px;
          font-weight: 600;
          color: #374151;
          margin: 16px 0 8px 0;
        }

        .code-block {
          background: #1f2937;
          color: #10b981;
          padding: 16px;
          border-radius: 8px;
          font-family: 'Courier New', monospace;
          font-size: 13px;
          overflow-x: auto;
          margin-bottom: 16px;
        }

        .docs-features ul {
          list-style: none;
          padding: 0;
          margin: 0;
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
          gap: 8px;
        }

        .docs-features li {
          font-size: 14px;
          color: #374151;
          padding: 8px 0;
        }

        @media (max-width: 768px) {
          .modal-example-actions {
            flex-direction: column;
          }

          .example-action-btn {
            width: 100%;
          }

          .card-stats {
            grid-template-columns: 1fr;
          }

          .card-actions {
            flex-direction: column;
          }

          .card-action-btn {
            width: 100%;
          }

          .docs-features ul {
            grid-template-columns: 1fr;
          }
        }
      `}</style>
    </div>
  );
};

export default ModalExample;
