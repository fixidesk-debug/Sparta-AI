version: '3.9'
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sparta-backend-prod
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
    networks:
      - sparta-net
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 256M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sparta-frontend-prod
    env_file:
      - ./frontend/.env
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - sparta-net
    volumes:
      - ./frontend/public:/usr/share/nginx/html/public
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 128M

  db:
    image: postgres:15-alpine
    container_name: sparta-db-prod
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sparta_db}
      POSTGRES_USER: ${POSTGRES_USER:-sparta}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sparta_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/app/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - sparta-net
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 128M

  redis:
    image: redis:7-alpine
    container_name: sparta-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - sparta-net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

  prometheus:
    image: prom/prometheus:latest
    container_name: sparta-prometheus-prod
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - sparta-net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

  grafana:
    image: grafana/grafana:latest
    container_name: sparta-grafana-prod
    ports:
      - "3000:3000"
    networks:
      - sparta-net
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

  nginx:
    image: nginx:alpine
    container_name: sparta-nginx-prod
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - frontend
      - backend
    networks:
      - sparta-net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sparta-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - sparta-net
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 128M

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: sparta-logstash-prod
    ports:
      - "5000:5000"
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - sparta-net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: sparta-kibana-prod
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - sparta-net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  es_data:

networks:
  sparta-net:
    driver: bridge
